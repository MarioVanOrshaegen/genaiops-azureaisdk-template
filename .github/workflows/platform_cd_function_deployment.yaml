name: platform_cd_function_deployment

on:
  workflow_call:
    inputs:
      env_name:
        type: string
        description: "Execution Environment"
        required: true
      use_case_base_path:
        type: string
        description: "The flow use-case to execute"
        required: true
        default: "math_coding"
  workflow_dispatch:
    inputs:
      env_name:
        type: string
        description: "Execution Environment"
        required: true
        default: "dev"
      use_case_base_path:
        type: string
        description: "The flow use-case to execute"
        required: true
        default: "math_coding"

jobs:
  flow-deployment:
    name: prompt flow deployment job
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.env_name }}
    env:
      RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
      WORKSPACE_NAME: ${{ vars.PROJECT_NAME }}
    steps:
      - name: Checkout Actions
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.azure_credentials }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r .github/requirements/execute_job_requirements.txt -U
          python -m pip install .github/workflows/azure_ai_projects-1.0.0b1-py3-none-any.whl -U --force-reinstall
          #python -m pip install .github/workflows/azure_ai_inference-1.0.0b5-py3-none-any.whl -U --force-reinstall
            
      - name: Install js-yaml
        run: |
          npm install js-yaml
          
      # If you're using it in a Node.js script
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          
      - name: Install Dependencies
        run: |
          npm init -y
          npm install js-yaml @actions/core @actions/github

          - name: Install jq
          run: |
            sudo apt-get update
            sudo apt-get install jq
  
      - name: Install yq
        run: |
          VERSION="v4.40.5"  # Specify the version you want
          BINARY="yq_linux_amd64"
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - |\
          tar xz && sudo mv ${BINARY} /usr/bin/yq
            
      - name: Verify installations
        run: |
          jq --version
          yq --version

      - name: Create .env file
        env: 
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: |
          echo "$SECRETS_CONTEXT" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > .env
          
          echo "=== .env file location ==="
          realpath .env
          pwd
          echo "Current directory: $PWD/.env"
          
          echo -e "\n=== .env file content (masked) ==="
          while IFS='=' read -r key value; do
            if [ ! -z "$key" ]; then
              echo "$key=***"
            fi
          done < .env
          
          echo -e "\n=== File permissions ==="
          ls -la .env
          
          echo -e "\n=== Directory structure ==="
          ls -la
          
          echo -e "\n=== Working directory structure ==="
          tree -a -L 2 || ls -R  # try t

          python -c "from dotenv import load_dotenv; load_dotenv()"
          echo "Created .env file with all secrets"

      - name: load .env file
        run: python -c "from dotenv import load_dotenv; load_dotenv()"

      - name: load the current Azure subscription details
        id: subscription_details
        shell: bash
        run: |
          export subscriptionId=$(az account show --query id -o tsv)
          echo "SUBSCRIPTION_ID=$subscriptionId" >> $GITHUB_OUTPUT

      - name: Read YAML file
        id: yaml
        uses: actions/github-script@v6
        env:
          CONFIG_PATH: ${{ inputs.use_case_base_path }}/experiment.yaml
          DEPLOYMENT_CONFIG_PATH: ${{ inputs.use_case_base_path }}/deployment_config.yaml
        with:
          script: |
            const configPath = process.env.CONFIG_PATH;
            const yaml = require('js-yaml');
            const fs = require('fs');
            const fileContents = fs.readFileSync(configPath, 'utf8');
            const data = yaml.load(fileContents);
            console.log('flow:', data.flow);
            console.log('entry_point:', data.entry_point);
            core.setOutput('config', data);
            core.setOutput('flow', data.flow);
            core.setOutput('entry_point', data.entry_point);

            const dep_config_path = process.env.DEPLOYMENT_CONFIG_PATH;
            const deployment_Config = fs.readFileSync(dep_config_path, 'utf8');
            const dep_data = yaml.load(deployment_Config);
            core.setOutput('dep_config', dep_data);

            console.log('function:', dep_data.resource_group);
            console.log('function:', dep_data.app_name);
            console.log('function:', dep_data.function_name);
            core.setOutput('func_resource_group', dep_data.resource_group);
            core.setOutput('func_app_name', dep_data.app_name);
            core.setOutput('func_function_name', dep_data.function_name);


            

      - name: Copy scripts and template
        env:
          FLOW: ${{ fromJson(steps.yaml.outputs.config).flow }}
          ENTRY_POINT: ${{ fromJson(steps.yaml.outputs.config).entry_point }}
          USE_CASE_PATH: ${{ inputs.use_case_base_path }}
        run: |

          ENTRY_POINT_FILE=$(echo "$ENTRY_POINT" | cut -d':' -f1).py
          FLOW_DIR=$(echo "$FLOW" | cut -d'/' -f1)
          FULL_PATH="$USE_CASE_PATH/$FLOW/*"
          echo "Full path: $FULL_PATH"

          # Create directory if it doesn't exist
          mkdir -p genai_temp/$USE_CASE_PATH/function_processor


          # Copy the template
          cp -r llmops/deployment/function_template/* "genai_temp/$USE_CASE_PATH"

          # Copy the script
          cp  $FULL_PATH "genai_temp/$USE_CASE_PATH/function_processor/"

          # Copy the script
          cp -r $USE_CASE_PATH/deployment/function_orchestrator.py genai_temp/$USE_CASE_PATH/function_processor
            
          # Verify copy
          ls -la genai_temp/$USE_CASE_PATH/

      - name: Create deployment package
        run: |
          cd genai_temp/${{ inputs.use_case_base_path }}
          zip function_deploy.zip * -r
          cd ..

      - name: Deploy to Azure Functions
        env:
            SECRETS_CONTEXT: ${{ toJson(secrets) }}
            DEP_CONFIG: ${{ fromJson(steps.yaml.outputs.dep_config) }}

        run: |
          resource_group=$(echo "$DEP_CONFIG" | jq -r '.resource_group')
          app_name=$(echo "$DEP_CONFIG" | jq -r '.app_name')

          # Validate that required values are present
          if [ -z "$resource_group" ] || [ "$resource_group" == "null" ]; then
            echo "Error: resource_group not found in configuration"
            exit 1
          fi

          if [ -z "$app_name" ] || [ "$app_name" == "null" ]; then
            echo "Error: app_name not found in configuration"
            exit 1
          fi

          az functionapp deployment source config-zip \
            -g $resource_group \
            -n $app_name \
            --src genai_temp/${{ inputs.use_case_base_path }}/function_deploy.zip --build-remote true

          if [ -z "$SECRETS_CONTEXT" ]; then
            echo "Error: SECRETS_CONTEXT environment variable is required"
            exit 1
          fi

          # Direct JSON transformation using jq
          json_settings=$(echo "$SECRETS_CONTEXT" | jq -r 'to_entries | map({key: .key, value: .value}) | map({(.key): .value}) | add')

          if [ -z "$json_settings" ] || [ "$json_settings" = "null" ]; then
            echo "Error: Failed to parse secrets from SECRETS_CONTEXT"
            exit 1
          fi

          # Execute the command with JSON input
          if ! az functionapp config appsettings set \
            --name $app_name \
            --resource-group $resource_group \
            --settings "$json_settings"; then
            echo "Error: Failed to update Function App settings"
            exit 1
          fi

          echo "Successfully updated Function App settings"

      - name: INvoke Azure function
        env:
            SECRETS_CONTEXT: ${{ toJson(secrets) }}
            DEP_CONFIG: ${{ fromJson(steps.yaml.outputs.dep_config) }}
        run: |
          resource_group=$(echo "$DEP_CONFIG" | jq -r '.resource_group')
          app_name=$(echo "$DEP_CONFIG" | jq -r '.app_name')
          function_name=$(echo "$DEP_CONFIG" | jq -r '.function_name')
          input_file=${{ inputs.use_case_base_path }}/sample-request.json 

          Validate that required values are present
          if [ -z "$resource_group" ] || [ "$resource_group" == "null" ]; then
            echo "Error: resource_group not found in configuration"
            exit 1
          fi
          
          if [ -z "$app_name" ] || [ "$app_name" == "null" ]; then
            echo "Error: app_name not found in configuration"
            exit 1
          fi
          
          if [ -z "$function_name" ] || [ "$function_name" == "null" ]; then
            echo "Error: function_name not found in configuration"
            exit 1
          fi
          
          echo "Getting function URL..."
          FUNCTION_URL=$(az functionapp function show -g $resource_group -n $app_name --function-name $function_name --query "invokeUrlTemplate" -o tsv)
          if [ -z "$FUNCTION_URL" ]; then
            echo "Error: Could not get function URL. Please check the function app and function name."
            exit 1
          fi
          
          # Get function key
          echo "Getting function key..."
          FUNCTION_KEY=$(az functionapp function keys list -g $resource_group -n $app_name --function-name $function_name --query "default" -o tsv)
          if [ -z "$FUNCTION_KEY" ]; then
            echo "Error: Could not get function key. Please check your permissions."
            exit 1
          fi
          
          echo "Function URL: $FUNCTION_URL"
          echo "Starting to process records..."
          
          # Process each JSON object in the file
          while IFS= read -r item; do
              # Extract the question and encode it
              question=$(echo "$item" | jq -r '.question')
              encoded_question=$(echo "$question" | jq -sRr @uri)
              
              # Construct the request URL
              request_url="${FUNCTION_URL}?code=${FUNCTION_KEY}&question=${encoded_question}"
              
              # Send GET request to Azure Function
              response=$(curl -s -X GET \
                  -H "Content-Type: application/json" \
                  "$request_url")
              
              # Check if curl command was successful
              if [ $? -eq 0 ]; then
                  echo "Success: $response"
              else
                  echo "Error invoking function"
                  echo "Response: $response"
              fi
              
              # Add a small delay between requests
              sleep 1
          done < <(jq -c '.[]' "$input_file")